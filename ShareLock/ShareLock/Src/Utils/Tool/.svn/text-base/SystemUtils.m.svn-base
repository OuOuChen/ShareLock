

#define stateLabelTextColor kRGB(90, 90, 90)

#import "SystemUtils.h"
#import "MJRefresh.h"
#import "Reachability.h"
#import <CoreTelephony/CTCarrier.h>
#import <CoreTelephony/CTTelephonyNetworkInfo.h>

@implementation NSString(Extra)

- (NSNumber *)numberValue
{
    return [NSNumber numberWithInt:[self intValue]];
}

- (NSDate *)dateValue
{
    return [SystemUtils dateFromString:self withFormatString:kTimeFormatStringSecond];
}

- (NSDate *)dateValueForDate
{
    return [SystemUtils dateFromString:self withFormatString:kTimeFormatStringDay];
}

- (NSDate *)dateValueWithFormatString:(NSString *)formatString;
{
    return [SystemUtils dateFromString:self withFormatString:formatString];
}

@end

@implementation SystemUtils
/** 获取当前网络 */
-(void)setReachability
{
    Reachability * reach = [Reachability reachabilityWithHostname:@"www.baidu.com"];
    [reach startNotifier];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(reachabilityAction) name:kReachabilityChangedNotification object:nil];
}
-(void)reachabilityAction
{
    
    UIApplication *application = [UIApplication sharedApplication];
    
    NSArray *chlidrenArray = [[[application valueForKeyPath:@"statusBar"] valueForKeyPath:@"foregroundView"] subviews];
    
    NSInteger netType =0;
    
    for (id  child in chlidrenArray) {
        
        if ([child isKindOfClass:NSClassFromString(@"UIStatusBarDataNetworkItemView")]) {
            
            netType = [[child valueForKeyPath:@"dataNetworkType"] integerValue];
            
        }
    }
    
    switch (netType) {
        case 0:
            
            //无网络
            
            break;
        case 1:
            
           //2G
            
            break;
        case 2:
            
            //3G
            
            break;
        case 3:
            
            //4G
            
            break;
        case 5:
            
            //WIFE
            
            break;
            
        default:
            break;
    }
    
}
/** 获取当前网络 */
+ (NSString *)getNetworkType{
    
    NSString *netconnType = @"";
    
    Reachability *reach = [Reachability reachabilityWithHostName:@"www.apple.com"];
    
    switch ([reach currentReachabilityStatus]) {
        case NotReachable:
        {
            
            netconnType = kNoNetwork;
        }
            break;
            
        case ReachableViaWiFi:
        {
            netconnType = @"Wifi";
        }
            break;
            
        case ReachableViaWWAN:
        {
            // 获取手机网络类型
            CTTelephonyNetworkInfo *info = [[CTTelephonyNetworkInfo alloc] init];
            
            NSString *currentStatus = info.currentRadioAccessTechnology;
            
            if ([currentStatus isEqualToString:@"CTRadioAccessTechnologyGPRS"]) {
                
                netconnType = @"GPRS";
            }else if ([currentStatus isEqualToString:@"CTRadioAccessTechnologyEdge"]) {
                
                netconnType = @"2.75G EDGE";
            }else if ([currentStatus isEqualToString:@"CTRadioAccessTechnologyWCDMA"]){
                
                netconnType = @"3G";
            }else if ([currentStatus isEqualToString:@"CTRadioAccessTechnologyHSDPA"]){
                
                netconnType = @"3.5G HSDPA";
            }else if ([currentStatus isEqualToString:@"CTRadioAccessTechnologyHSUPA"]){
                
                netconnType = @"3.5G HSUPA";
            }else if ([currentStatus isEqualToString:@"CTRadioAccessTechnologyCDMA1x"]){
                
                netconnType = @"2G";
            }else if ([currentStatus isEqualToString:@"CTRadioAccessTechnologyCDMAEVDORev0"]){
                
                netconnType = @"3G";
            }else if ([currentStatus isEqualToString:@"CTRadioAccessTechnologyCDMAEVDORevA"]){
                
                netconnType = @"3G";
            }else if ([currentStatus isEqualToString:@"CTRadioAccessTechnologyCDMAEVDORevB"]){
                
                netconnType = @"3G";
            }else if ([currentStatus isEqualToString:@"CTRadioAccessTechnologyeHRPD"]){
                
                netconnType = @"HRPD";
            }else if ([currentStatus isEqualToString:@"CTRadioAccessTechnologyLTE"]){
                
                netconnType = @"4G";
            }
        }
            break;
            
        default:
            break;
    }
    
    return netconnType;
}

/** 开始下拉刷新*/
+ (void)beginPullRefreshForScrollView:(UIScrollView *)scrollView {
    [scrollView.mj_header beginRefreshing];
}

/**判断头部是否在刷新*/
+ (BOOL)headerIsRefreshForScrollView:(UIScrollView *)scrollView {
    
    BOOL flag =  scrollView.mj_header.isRefreshing;
    return flag;
}

/**判断是否尾部在刷新*/
+ (BOOL)footerIsLoadingForScrollView:(UIScrollView *)scrollView {
    return  scrollView.mj_footer.isRefreshing;
}

/**提示没有更多数据的情况*/
+ (void)noticeNoMoreDataForScrollView:(UIScrollView *)scrollView {
    [scrollView.mj_footer endRefreshingWithNoMoreData];
}

/**重置footer*/
+ (void)resetNoMoreDataForScrollView:(UIScrollView *)scrollView {
    [scrollView.mj_footer resetNoMoreData];
}

/**停止下拉刷新*/
+ (void)endRefreshForScrollView:(UIScrollView *)scrollView {
    [scrollView.mj_header endRefreshing];
}

/**停止上拉加载*/
+ (void)endLoadMoreForScrollView:(UIScrollView *)scrollView {
    [scrollView.mj_footer endRefreshing];
}

/** 隐藏footer*/
+ (void)hiddenFooterForScrollView:(UIScrollView *)scrollView {
    // 不确定是哪个类型的footer
    scrollView.mj_footer.hidden = YES;
}

/**隐藏header*/
+ (void)hiddenHeaderForScrollView:(UIScrollView *)scrollView {
    scrollView.mj_header.hidden = YES;
}

/**上拉*/
+ (void)addLoadMoreForScrollView:(UIScrollView *)scrollView
                loadMoreCallBack:(RefreshAndLoadMoreHandle)loadMoreCallBackBlock {
    
    if (scrollView == nil || loadMoreCallBackBlock == nil) {
        return ;
    }
    MJRefreshAutoNormalFooter *footer = [MJRefreshAutoNormalFooter footerWithRefreshingBlock:^{
        if (loadMoreCallBackBlock) {
            loadMoreCallBackBlock();
        }
    }];
    [footer setTitle:@"释放加载更多" forState:MJRefreshStateIdle];
    [footer setTitle:@"正在为您加载数据" forState:MJRefreshStateRefreshing];
    [footer setTitle:@"没有更多了~" forState:MJRefreshStateNoMoreData];
    footer.stateLabel.textColor = stateLabelTextColor;
    footer.stateLabel.font = ThirteenFontSize;
//    footer.automaticallyHidden = YES;
    scrollView.mj_footer = footer;
    footer.backgroundColor = kClearColor;
    
    
}

/**下拉*/
+ (void)addPullRefreshForScrollView:(UIScrollView *)scrollView
                pullRefreshCallBack:(RefreshAndLoadMoreHandle)pullRefreshCallBackBlock {
    __weak typeof(UIScrollView *)weakScrollView = scrollView;
    if (scrollView == nil || pullRefreshCallBackBlock == nil) {
        return ;
    }
    MJRefreshNormalHeader *header = [MJRefreshNormalHeader headerWithRefreshingBlock:^{
        if (pullRefreshCallBackBlock) {
            pullRefreshCallBackBlock();
        }
        if (weakScrollView.mj_footer.hidden == NO) {
            [weakScrollView.mj_footer resetNoMoreData];
        }
        
    }];
    
    [header setTitle:@"释放更新" forState:MJRefreshStatePulling];
    [header setTitle:@"正在更新" forState:MJRefreshStateRefreshing];
    [header setTitle:@"下拉刷新" forState:MJRefreshStateIdle];
    [header setTitle:@"没有发现数据" forState:MJRefreshStateNoMoreData];
    header.stateLabel.font = ThirteenFontSize;
    header.stateLabel.textColor = stateLabelTextColor;
    header.lastUpdatedTimeLabel.hidden = YES;
    
    scrollView.mj_header = header;
}


/**时间戳转时间 YYYY-MM-dd HH:mm:ss*/
+(NSString *)DateStringFromDateStamp:(NSTimeInterval)DateStamp styleFormatter:(NSString *)styleFormatter
{
//    styleFormatter = @"yyyy-MM-dd";

    NSDateFormatter* formatter = [[NSDateFormatter alloc] init];
    [formatter setDateStyle:NSDateFormatterMediumStyle];
    [formatter setTimeStyle:NSDateFormatterShortStyle];
    [formatter setDateFormat:styleFormatter];
    
    
    NSDate *confromTimesp = [NSDate dateWithTimeIntervalSince1970:DateStamp/1000];
    return [formatter stringFromDate:confromTimesp];
    
}



//根据指定时间的字符串格式和时间 格式例如yyyy-MM-dd HH:mm:ss:SSS
+ (NSString *)stringDateByFormatString:(NSString *) formatString withDate:(NSDate *)date
{
    static  NSDateFormatter * dateFromatter = nil;
    NSString * strDate = nil;
    if(!dateFromatter)
    {
        dateFromatter = [[NSDateFormatter alloc] init];
        [dateFromatter setTimeStyle:NSDateFormatterShortStyle];
        [dateFromatter setTimeZone:[NSTimeZone timeZoneWithName:@"UTC"]];
    }
    
    if (date == nil)
    {
        return @"";
    }
    
    @synchronized(dateFromatter)
    {
        if(formatString!=nil)
        {
            [dateFromatter setDateFormat:formatString];
        }
        strDate = [dateFromatter stringFromDate:date];
    }
    
    return strDate;
}


+ (NSString *)doubleToString:(double)doubleValue
{
    NSString *d2Str       = [NSString stringWithFormat:@"%lf", doubleValue];
    NSDecimalNumber *num1 = [NSDecimalNumber decimalNumberWithString:d2Str];
    NSString *retStr       = [num1 stringValue];
    return retStr;
}



/**
 拼接规格字符串，格式如：20000:3275069;1753146:3485013
 
 @return 格式字符串
 */
+(NSString *)joineSpecString:(NSString *)jsonStr{
    NSArray *arr = [jsonStr mj_JSONObject];
    
    NSMutableArray *specArray = [NSMutableArray array];
    for (NSDictionary *dic in arr) {
        NSString *str = [NSString stringWithFormat:@"%@:%@",dic[@"kid"],dic[@"vid"]];
        [specArray addObject:str];
    }
    NSString *vluey = [specArray componentsJoinedByString:@";"];
    return vluey;
}



//字符串转换成日期
+ (NSDate *)dateFromString:(NSString *)datestring withFormatString:(NSString *)formatString{
    static NSDateFormatter *formatter = nil;
    if (!formatter) {
        formatter = [[NSDateFormatter alloc] init];
        //        [formatter setTimeZone:[NSTimeZone timeZoneWithAbbreviation:@"UTC"]];
    }
    
    NSDate *date = nil;
    @synchronized(formatter) {
        //#define kDEFAULT_DATE_TIME_FORMAT (@"yyyy-MM-dd'T'HH:mm:ss'Z'")
        [formatter setDateFormat:formatString];
        date = [formatter dateFromString:datestring];
    }
    return date;
}

// 金额转换千位符显示
+ (NSString *)separatedDigitStringWithStr:(NSNumber *)numStr
{
    NSNumberFormatter *formatter = [[NSNumberFormatter alloc]init];
    formatter.numberStyle = kCFNumberFormatterCurrencyPluralStyle;
//    DDLogDebug(@"金额0=%@",numStr);
    NSString *newStr = [formatter stringFromNumber: [NSNumber numberWithDouble:[numStr doubleValue]]];
//    DDLogDebug(@"金额1=%@",newStr);
    newStr = [newStr substringToIndex:newStr.length-3]; // 截取系统自带“美元”字符(英文版) "人民币"(中文版)
//    DDLogDebug(@"金额2=%@",newStr);
    return newStr;
}

+ (NSString *)separatedInterceptAdecimalNumberStr:(NSNumber *)numStr
{
    NSNumberFormatter *formatter = [[NSNumberFormatter alloc]init];
    formatter.numberStyle = kCFNumberFormatterCurrencyPluralStyle;
    //    DDLogDebug(@"金额0=%@",numStr);
    NSString *newStr = [formatter stringFromNumber: [NSNumber numberWithDouble:[numStr doubleValue]]];
    //    DDLogDebug(@"金额1=%@",newStr);
    newStr = [newStr substringToIndex:newStr.length-4]; // 截取系统自带“美元”字符(英文版) "人民币"(中文版)
    //    DDLogDebug(@"金额2=%@",newStr);
    return newStr;
}

+ (NSString *)spacComponentsJoinedByString:(NSArray *) spacArray
{
    NSMutableArray *rusutlArray = [NSMutableArray array];
    for (NSDictionary *dic  in spacArray) {
        NSString *str = [NSString stringWithFormat:@"%@:%@",dic[@"k"],dic[@"v"]];
        [rusutlArray addObject:str];
    }
    NSString *retStr = [rusutlArray componentsJoinedByString:@","];
    
    return retStr;
}



//取昨天的日期
+ (NSString *)getYesterdayDate:(NSDate *)nowDate numDay:(int)numDay
{
    NSDateFormatter *format = [[NSDateFormatter alloc] init];
    [format setDateFormat:kTimeFormatStringDay];
    NSString * reportDate = [format stringFromDate:nowDate];
    NSDate *date = [format dateFromString:reportDate];
    NSDate *newDate = [[NSDate alloc] initWithTimeIntervalSinceReferenceDate:([date timeIntervalSinceReferenceDate] - 24*3600*numDay)];
    reportDate = [format stringFromDate:newDate];
    
    return reportDate;
}

//计算当前日期的星期
+ (long)getDayWeek:(NSDate *)dateNow
{
    NSCalendar *calendar = [[NSCalendar alloc] initWithCalendarIdentifier:NSCalendarIdentifierGregorian];//设置成中国阳历
    NSDateComponents *comps = [[NSDateComponents alloc] init];
    NSInteger unitFlags = NSCalendarUnitYear | NSCalendarUnitMonth | NSCalendarUnitDay | NSCalendarUnitDay | NSCalendarUnitHour | NSCalendarUnitMinute | NSCalendarUnitSecond;
    comps = [calendar components:unitFlags fromDate:dateNow];
    long weekNumber = [comps weekday]; //获取星期对应的长整形字符串
    
    
    return weekNumber;
}

//时间戳转换为时间
+ (NSDate *)timespConvertDate:(long)timeStr
{
    //    NSDateFormatter *formatter = [[NSDateFormatter alloc] init] ;
    //    [formatter setDateStyle:NSDateFormatterMediumStyle];
    //    [formatter setTimeStyle:NSDateFormatterShortStyle];
    //    [formatter setDateFormat:kTimeFormatStringSec]; // ----------设置你想要的格式,hh与HH的区别:分别表示12小时制,24小时制
    //    NSTimeZone* timeZone = [NSTimeZone localTimeZone];
    //    [formatter setTimeZone:timeZone];
    
    NSDate *date2 = [NSDate dateWithTimeIntervalSince1970:timeStr];
    return date2;
    
}


//获取一个星期的始末日期

+ (NSDictionary *)getMonthBeginAndEndWith:(NSDate *)newDate withType:(int)type
{
    if (newDate == nil) {
        newDate = [NSDate date];
    }
    double interval = 0;
    NSDate *beginDate = nil;
    NSDate *endDate = nil;
    
    NSCalendar *calendar = [NSCalendar currentCalendar];
    [calendar setFirstWeekday:2];//设定周一为周首日
    
    BOOL ok;
    
    switch (type) {
        case 1://周
            ok = [calendar rangeOfUnit:NSCalendarUnitWeekOfMonth startDate:&beginDate interval:&interval forDate:newDate];
            break;
        case 2://月
            ok = [calendar rangeOfUnit:NSCalendarUnitMonth startDate:&beginDate interval:&interval forDate:newDate];
            break;
        case 3://年
            ok = [calendar rangeOfUnit:NSCalendarUnitYear startDate:&beginDate interval:&interval forDate:newDate];
            break;
            
        default:
            ok = NO;
            break;
    }
    
    //分别修改为 NSDayCalendarUnit NSWeekCalendarUnit NSYearCalendarUnit
    if (ok) {
        endDate = [beginDate dateByAddingTimeInterval:interval-1];
    }else {
        return nil;
    }
    NSDateFormatter *myDateFormatter = [[NSDateFormatter alloc] init];
    [myDateFormatter setDateFormat:kTimeFormatStringDay];
    NSString *beginString = [myDateFormatter stringFromDate:beginDate];
    beginDate = [beginString dateValueWithFormatString:kTimeFormatStringDay];;
    
    //    NSString *endString = [myDateFormatter stringFromDate:endDate];
    //    NSString *s = [NSString stringWithFormat:@"开始日期:%@-结束日期:%@",beginString,endString];
    //    NSLog(@"%@",s);
    
    NSDictionary *retDic = [NSDictionary dictionaryWithObjectsAndKeys:beginDate,@"startDate",endDate,@"endDate", nil];
    
    return retDic;
    
}

+(NSString *)notRounding:(float)price afterPoint:(int)position
{
    NSDecimalNumberHandler* roundingBehavior = [NSDecimalNumberHandler decimalNumberHandlerWithRoundingMode:NSRoundDown scale:position raiseOnExactness:NO raiseOnOverflow:NO raiseOnUnderflow:NO raiseOnDivideByZero:NO];
    NSDecimalNumber *ouncesDecimal;
    NSDecimalNumber *roundedOunces;
    
    ouncesDecimal = [[NSDecimalNumber alloc] initWithFloat:price];
    roundedOunces = [ouncesDecimal decimalNumberByRoundingAccordingToBehavior:roundingBehavior];
    return [NSString stringWithFormat:@"%@",roundedOunces];
}


+ (NSUInteger)durationWithVideo:(NSURL *)videoUrl{
    
    NSDictionary *opts = [NSDictionary dictionaryWithObject:@(NO) forKey:AVURLAssetPreferPreciseDurationAndTimingKey];
    AVURLAsset *urlAsset = [AVURLAsset URLAssetWithURL:videoUrl options:opts]; // 初始化视频媒体文件
    NSUInteger second = 0;
    second = urlAsset.duration.value / urlAsset.duration.timescale; // 获取视频总时长,单位秒
    
    return second;
}

+(NSString *)getAppVersion{
    NSDictionary *infoDictionary = [[NSBundle mainBundle] infoDictionary];
    NSString *appCurVersion = [infoDictionary objectForKey:@"CFBundleShortVersionString"];
    return appCurVersion;
}

@end
